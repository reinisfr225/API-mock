openapi: 3.0.0
info:
  version: 1.0.0
  title: User Account API
  description: API for managing user accounts with personal identification details

servers:
  - url: http://localhost:8080/api

paths:
  /users:
    post:
      summary: Create a new user
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    get:
      summary: Get all users
      security:
        - basicAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get a user by ID
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    put:
      summary: Update a user by ID
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    delete:
      summary: Delete a user by ID
      security:
        - basicAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:
    User:
      type: object
      required:
        - firstName
        - lastName
        - dateOfBirth
        - personalIdDocument
      properties:
        id:
          type: string
          description: Unique identifier for the user
        firstName:
          type: string
          description: User's first name
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          description: User's last name
          minLength: 2
          maxLength: 50
        email:
          type: string
          format: email
          description: User's email address
        dateOfBirth:
          type: string
          format: date
          description: User's date of birth in YYYY-MM-DD format
        personalIdDocument:
          type: object
          description: Personal identification document details
          required:
            - documentId
            - countryOfIssue
            - validUntil
          properties:
            documentId:
              type: string
              description: Personal document identifier
              minLength: 5
              maxLength: 20
            countryOfIssue:
              type: string
              description: The country that issued the document (ISO 3166-1 alpha-2)
              pattern: "^[A-Z]{2}$"
            validUntil:
              type: string
              format: date
              description: The document's validity term (expiration date)

    ProblemDetails:
      type: object
      description: Standardized error response object as per RFC 7807
      properties:
        type:
          type: string
          format: uri
          description: A URI reference to the type of error (optional)
        title:
          type: string
          description: A short, human-readable summary of the problem
        status:
          type: integer
          format: int32
          description: HTTP status code generated by the origin server
        detail:
          type: string
          description: A detailed description of the problem
        instance:
          type: string
          format: uri
          description: A URI reference to the specific instance of the problem
      required:
        - title
        - status